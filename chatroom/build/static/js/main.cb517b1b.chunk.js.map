{"version":3,"sources":["Components/Chatlist.js","api.js","Components/Userlist.js","Components/Inputer.js","Components/Chat.js","Components/Setname.js","Components/App.js","index.js"],"names":["Chatlist","props","listElements","chatlog","map","element","index","key","className","username","msg","time","id","socket","openSocket","window","location","hostname","sendMsg","data","emit","parseUrlQuery","search","pair","substr","split","i","length","param","Userlist","userListElements","users","Inputer","state","roomid","keyListener","e","keyCode","shiftKey","lastIndexOf","setState","handleChange","event","target","value","document","addEventListener","this","autoFocus","onChange","placeholder","onClick","Component","Chat","message","scrollToBottom","animateScroll","containerId","soundMsg","audio","Audio","src","autoplay","newMessage","cb","newchatlog","push","on","gotDisconnect","newUser","newusers","console","log","linkToBuffer","getElementById","select","execCommand","readOnly","host","Setname","send","App","isSet","onDisconnect","reload","alert","setName","render"],"mappings":"6PAqBeA,MAnBf,SAAkBC,GACd,IAAMC,EAAeD,EAAME,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACnC,wBAAIC,IAAKD,GACL,yBAAKE,UAAW,aACZ,yBAAKA,UAAW,WAAYH,EAAQI,UACpC,yBAAKD,UAAW,UAAWH,EAAQK,KACnC,yBAAKF,UAAW,WAAYH,EAAQM,WAIhD,OACI,yBAAKC,GAAI,cAAeJ,UAAW,eAC/B,wBAAII,GAAI,WAAYJ,UAAW,YAC1BN,K,QCbXW,E,MAASC,GAAWC,OAAOC,SAASC,SAAS,SAOnD,SAASC,EAAQC,GACbN,EAAOO,KAAK,UAAWD,GAuB3B,SAASE,IACL,IAAIF,EAAO,GACX,GAAGJ,OAAOC,SAASM,OAEf,IADA,IAAIC,EAAQR,OAAOC,SAASM,OAAOE,OAAO,GAAIC,MAAM,KAC5CC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAM,CAClC,IAAIE,EAAQL,EAAKG,GAAGD,MAAM,KAC1BN,EAAKS,EAAM,IAAMA,EAAM,GAG/B,OAAOT,E,YCtBIU,MAlBf,SAAkB5B,GAEd,IAAM6B,EAAmB7B,EAAM8B,MAAM3B,KAAI,SAACC,EAAQC,GAAT,OACrC,wBAAIC,IAAKD,GACJD,EAAQI,aAIjB,OACI,yBAAKD,UAAW,eAAhB,SACU,6BACN,wBAAIA,UAAW,YACVsB,KC4BFE,E,2MArCXC,MAAQ,CAACxB,SAAU,EAAKR,MAAMgC,MAAMxB,SAAUyB,OAAQ,EAAKjC,MAAMgC,MAAMC,OAAQxB,IAAK,I,EAEpFyB,YAAc,SAACC,GACX,GAAiB,KAAdA,EAAEC,UACGD,EAAEE,SAAU,CACZ,KAAO,EAAKL,MAAMvB,IAAI6B,YAAY,QAAU,EAAKN,MAAMvB,IAAIiB,OAAO,GAC9D,EAAKa,SAAS,CAAC9B,IAAK,EAAKuB,MAAMvB,IAAIc,OAAO,EAAE,EAAKS,MAAMvB,IAAIiB,OAAO,KAEnD,KAAnB,EAAKM,MAAMvB,KAAcQ,EAAQ,CAACT,SAAU,EAAKwB,MAAMxB,SAAUyB,OAAQ,EAAKD,MAAMC,OAAQxB,IAAI,EAAKuB,MAAMvB,MAC3G,EAAK8B,SAAS,CAAC9B,IAAK,O,EAKhCQ,QAAU,WACN,EAAKe,MAAMvB,KAAOQ,EAAQ,CAACT,SAAU,EAAKwB,MAAMxB,SAAUyB,OAAQ,EAAKD,MAAMC,OAAQxB,IAAI,EAAKuB,MAAMvB,MACpG,EAAK8B,SAAS,CAAC9B,IAAK,M,EAGxB+B,aAAe,SAACC,GACZ,EAAKF,SAAS,CAAC9B,IAAKgC,EAAMC,OAAOC,S,mFAIjCC,SAASC,iBAAiB,QAASC,KAAKZ,e,+BAIxC,OACI,yBAAK3B,UAAW,WACZ,8BAAUI,GAAI,UAAWoC,WAAW,EAAMJ,MAAOG,KAAKd,MAAMvB,IAAKuC,SAAUF,KAAKN,aAAcS,YAAa,qBAC3G,4BAAQtC,GAAI,UAAWuC,QAASJ,KAAK7B,SAArC,qB,GAjCMkC,aCuEPC,E,2MAjEXpB,MAAQ,CAACxB,SAAU,EAAKR,MAAMgC,MAAMxB,SAAUyB,OAAQ,EAAKjC,MAAMgC,MAAMC,OAAQoB,QAAS,GAAInD,QAAS,EAAKF,MAAMgC,MAAM9B,QAAS4B,MAAO,EAAK9B,MAAMgC,MAAMF,O,EAEvJwB,eAAiB,WACbC,gBAAcD,eAAe,CAACE,YAAa,iB,EAG/CC,SAAW,WACP,IAAIC,EAAQ,IAAIC,MAChBD,EAAME,IAAM,YACZF,EAAMG,UAAW,G,EAGrBC,WAAa,WHhBjB,IAAgBC,IGiBD,SAAC7C,GACJ,EAAKuC,WACL,IAAIO,EAAa,EAAKhC,MAAM9B,QAC5B8D,EAAWC,KAAK/C,GAChB,EAAKqB,SAAS,CAACrC,QAAS8D,GAAa,EAAKV,iBHpBlD1C,EAAOsD,GAAG,WAAW,SAAAhD,GAAI,OAAI6C,EAAG7C,O,EGwBhCiD,cAAgB,WHTpB,IAAuBJ,IGUD,SAAC7C,GACX,EAAKqB,SAAS,CAACT,MAAMZ,KHV7BN,EAAOsD,GAAG,kBAAkB,SAAAhD,GAAI,OAAI6C,EAAG7C,O,EGcvCkD,QAAU,WHXd,IAAiBL,IGYD,SAAC7C,GACL,IAAImD,EAAW,EAAKrC,MAAMF,MAC1BuC,EAASJ,KAAK/C,GACd,EAAKqB,SAAS,CAACT,MAAOuC,IACtBC,QAAQC,IAAI,EAAKvC,MAAMF,QHf/BlB,EAAOsD,GAAG,YAAY,SAAAhD,GAAI,OAAI6C,EAAG7C,O,EGmBjCsD,aAAe,WACD5B,SAAS6B,eAAe,QAC7BC,SACL9B,SAAS+B,YAAY,S,mFAGJ,IAAD,OAChB7B,KAAKgB,aACLhB,KAAKqB,gBACLrB,KAAKsB,UACL,IAAInC,EAASb,IAAgBa,OAC1BA,GACCa,KAAKP,SAAS,CAACN,OAAQA,IAAS,WAAMqC,QAAQC,IAAI,EAAKvC,MAAMC,a,+BAKjE,OACI,yBAAK1B,UAAW,QACZ,yBAAKA,UAAW,WAAhB,mBAA4CuC,KAAKd,MAAMC,OAAvD,KAAiEa,KAAKd,MAAMxB,SAA5E,IAAsF,6BAAK,yBAAKG,GAAI,aAAcuC,QAASJ,KAAK0B,cAArC,kBAA3F,IAAmK,2BAAO7D,GAAI,OAAQiE,UAAU,EAAMjC,MAAO,UAAU7B,OAAOC,SAAS8D,KAAK,WAAW/B,KAAKd,MAAMC,SAAS,6BACvQ,kBAAC,EAAD,CAAU/B,QAAW4C,KAAKd,MAAM9B,UAChC,kBAAC,EAAD,CAAU4B,MAASgB,KAAKd,MAAMF,SAElC,kBAAC,EAAD,CAASE,MAAO,CAACxB,SAAUsC,KAAKd,MAAMxB,SAAUyB,OAAQa,KAAKd,MAAMC,e,GA7DhEkB,aCsBJ2B,E,2MAxBX9C,MAAQ,CAACxB,SAAU,I,EAEnBgC,aAAe,SAACC,GACZ,EAAKF,SAAS,CAAC/B,SAAUiC,EAAMC,OAAOC,S,EAG1CoC,KAAO,WJMX,IAAkB7D,EILV,EAAKc,MAAMxB,WJKDU,EILuB,CAACV,SAAU,EAAKwB,MAAMxB,SAAUyB,OAAQb,IAAgBa,QJM7FrB,EAAOO,KAAK,WAAYD,K,wEIFpB,OACI,yBAAKX,UAAW,QACZ,yBAAKA,UAAW,YACZ,yBAAKA,UAAW,YAAhB,QACA,2BAAOI,GAAI,YAAaqC,SAAUF,KAAKN,aAAcS,YAAa,aAAcF,WAAW,IAC3F,4BAAQpC,GAAI,cAAeuC,QAASJ,KAAKiC,MAAzC,QAA4D,6BAC5D,yBAAKxE,UAAW,YAAhB,uC,GAnBE4C,aC8BP6B,E,2MAzBXhD,MAAQ,CAACiD,OAAO,EAAOzE,SAAU,GAAIyB,OAAQ,GAAI/B,QAAS,GAAI4B,MAAO,I,EAErEoD,aAAe,WLmBnB,IAA4BnB,IKlBD,WACfjD,OAAOC,SAASoE,SAChBC,MAAM,yBLiBdxE,EAAOsD,GAAG,cAAc,kBAAMH,Q,EKb9BsB,QAAU,WLJd,IAAiBtB,IKKD,SAAC7C,GACL,EAAKqB,SAAS,CAAC0C,OAAO,EAAMzE,SAAUU,EAAKV,SAAUyB,OAAQf,EAAKe,OAAQ/B,QAASgB,EAAKhB,QAAS4B,MAAOZ,EAAKY,SLLrHlB,EAAOsD,GAAG,YAAY,SAAAhD,GAAI,OAAI6C,EAAG7C,O,mFKU7B4B,KAAKuC,UACLvC,KAAKoC,iB,+BAIL,OAAOpC,KAAKd,MAAMiD,MAAQ,kBAAC,EAAD,CAAMjD,MAASc,KAAKd,QAAW,kBAAC,EAAD,U,GAvB/CmB,aCFlBmC,iBAAO,kBAAC,EAAD,MAAQ1C,SAAS6B,eAAe,W","file":"static/js/main.cb517b1b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Chatlist(props) {\r\n    const listElements = props.chatlog.map((element,index) =>\r\n        <li key={index}>\r\n            <div className={\"msgholder\"}>\r\n                <div className={\"namediv\"}>{element.username}</div>\r\n                <div className={\"msgdiv\"}>{element.msg}</div>\r\n                <div className={\"timediv\"}>{element.time}</div>\r\n            </div>\r\n        </li>\r\n    );\r\n    return (\r\n        <div id={\"chathistory\"} className={\"chathistory\"}>\r\n            <ul id={\"chatlist\"} className={\"chatlist\"}>\r\n                {listElements}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chatlist","import openSocket from 'socket.io-client'\r\n\r\nconst socket = openSocket(window.location.hostname+':3001');\r\n\r\n\r\nfunction newMsg(cb) {\r\n    socket.on('new_msg', data => cb(data));\r\n}\r\n\r\nfunction sendMsg(data) {\r\n    socket.emit('new_msg', data);\r\n}\r\n\r\nfunction gotName(cb) {\r\n    socket.on('got_name', data => cb(data));\r\n}\r\n\r\nfunction sendName(data) {\r\n    socket.emit('got_name', data);\r\n}\r\n\r\nfunction gotDisconnect(cb) {\r\n    socket.on('got_disconnect', data => cb(data));\r\n}\r\n\r\nfunction newUser(cb) {\r\n    socket.on('new_user', data => cb(data));\r\n}\r\n\r\nfunction onServerDisconnect(cb) {\r\n    socket.on('disconnect', () => cb());\r\n}\r\n\r\nfunction parseUrlQuery(){\r\n    let data = {};\r\n    if(window.location.search) {\r\n        let pair = (window.location.search.substr(1)).split('&');\r\n        for(let i = 0; i < pair.length; i ++) {\r\n            let param = pair[i].split('=');\r\n            data[param[0]] = param[1];\r\n        }\r\n    }\r\n    return data;\r\n};\r\n\r\nexport {newMsg,sendMsg,gotName,sendName, gotDisconnect, newUser, onServerDisconnect, parseUrlQuery};\r\n","import React from 'react'\r\n\r\nfunction Userlist(props) {\r\n\r\n    const userListElements = props.users.map((element,index) =>\r\n        <li key={index}>\r\n            {element.username}\r\n        </li>\r\n    );\r\n\r\n    return (\r\n        <div className={\"userlistdiv\"}>\r\n            Users:<br/>\r\n            <ul className={\"userlist\"}>\r\n                {userListElements}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Userlist;","import React, {Component} from 'react';\r\nimport {sendMsg} from '../api';\r\n\r\nclass Inputer extends Component{\r\n\r\n    state = {username: this.props.state.username, roomid: this.props.state.roomid, msg: ''};\r\n\r\n    keyListener = (e) => {\r\n        if(e.keyCode === 13) {\r\n            if(!e.shiftKey) {\r\n                while (this.state.msg.lastIndexOf(\"\\n\") === this.state.msg.length-1) {\r\n                    this.setState({msg: this.state.msg.substr(0,this.state.msg.length-1)});\r\n                }\r\n                this.state.msg !== '' && sendMsg({username: this.state.username, roomid: this.state.roomid, msg:this.state.msg});\r\n                this.setState({msg: ''});\r\n            }\r\n        }\r\n    };  //обработка нажатия клавиши Enter\r\n\r\n    sendMsg = () => {\r\n        this.state.msg && sendMsg({username: this.state.username, roomid: this.state.roomid, msg:this.state.msg});\r\n        this.setState({msg: ''});\r\n    };  //отправка сообщения\r\n\r\n    handleChange = (event) => {\r\n        this.setState({msg: event.target.value});\r\n    }; //обработка введённого текста\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('keyup', this.keyListener);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"inputer\"}>\r\n                <textarea id={\"msgText\"} autoFocus={true} value={this.state.msg} onChange={this.handleChange} placeholder={\"WriteSOMETEXT!!!\"} />\r\n                <button id={\"sendBtn\"} onClick={this.sendMsg}>SEND MESSAGE</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Inputer;","import React, {Component} from \"react\";\r\nimport Chatlist from \"./Chatlist\";\r\nimport {newMsg, gotDisconnect, newUser, parseUrlQuery} from \"../api\";\r\nimport { animateScroll } from \"react-scroll\";\r\nimport Userlist from './Userlist';\r\nimport Inputer from \"./Inputer\";\r\n\r\nclass Chat extends Component{\r\n\r\n    state = {username: this.props.state.username, roomid: this.props.state.roomid, message: \"\", chatlog: this.props.state.chatlog, users: this.props.state.users};\r\n\r\n    scrollToBottom = () => {\r\n        animateScroll.scrollToBottom({containerId: \"chathistory\"});\r\n    };  //прокрутка лога чата вниз\r\n\r\n    soundMsg = () => {\r\n        let audio = new Audio();\r\n        audio.src = 'sound.mp3';\r\n        audio.autoplay = true;\r\n    };  //Воспроизведение звука при получении сообщения\r\n\r\n    newMessage = () => {\r\n        newMsg((data) => {\r\n            this.soundMsg();\r\n            let newchatlog = this.state.chatlog;\r\n            newchatlog.push(data);\r\n            this.setState({chatlog: newchatlog}, this.scrollToBottom);\r\n        });\r\n    };  //обработка нового сообщения\r\n\r\n    gotDisconnect = () => {\r\n        gotDisconnect((data) => {\r\n            this.setState({users:data});\r\n        });\r\n    };  //обработка отключения пользователей\r\n\r\n    newUser = () => {\r\n        newUser((data) => {\r\n            let newusers = this.state.users;\r\n            newusers.push(data);\r\n            this.setState({users: newusers});\r\n            console.log(this.state.users);\r\n        });\r\n    };  //обработка нового пользователя\r\n\r\n    linkToBuffer = () => {\r\n        let link= document.getElementById(\"link\");\r\n        link.select();\r\n        document.execCommand('copy');\r\n    }; //копирование ссылки на комнату в буфер обмена\r\n\r\n    componentDidMount() {\r\n        this.newMessage();\r\n        this.gotDisconnect();\r\n        this.newUser();\r\n        let roomid = parseUrlQuery().roomid;\r\n        if(roomid) {\r\n            this.setState({roomid: roomid}, () =>{console.log(this.state.roomid)});\r\n        }\r\n    }  //чтение ID комнаты из адресной строки, подключение слушателей событий\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"room\"}>\r\n                <div className={\"content\"}>Welcome to room {this.state.roomid}, {this.state.username}!<br/><div id={\"linkholder\"} onClick={this.linkToBuffer}>Copy room link</div> <input id={\"link\"} readOnly={true} value={\"http://\"+window.location.host+\"?roomid=\"+this.state.roomid}/><br/>\r\n                    <Chatlist chatlog = {this.state.chatlog}/>\r\n                    <Userlist users = {this.state.users}/>\r\n                </div>\r\n                <Inputer state={{username: this.state.username, roomid: this.state.roomid}}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat","import React, {Component} from 'react';\r\nimport {sendName, parseUrlQuery} from '../api';\r\n\r\nclass Setname extends Component {\r\n\r\n    state = {username: ''};\r\n\r\n    handleChange = (event) => {\r\n        this.setState({username: event.target.value});\r\n    };  //отслеживание текста, введённого в поле input\r\n\r\n    send = () => {\r\n        this.state.username && sendName( {username: this.state.username, roomid: parseUrlQuery().roomid});\r\n    };  //отправка введённого имени на сервер\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"room\"}>\r\n                <div className={\"nameform\"}>\r\n                    <div className={\"justtext\"}>Chat</div>\r\n                    <input id={\"nameinput\"} onChange={this.handleChange} placeholder={\"Enter name\"} autoFocus={true}/>\r\n                    <button id={\"sendnamebtn\"} onClick={this.send}>Send</button><br/>\r\n                    <div className={\"justtext\"}>Test task by Vlasenko Vasiliy</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Setname;","import React, {Component} from 'react'\r\nimport \"../styles.css\"\r\nimport Chat from \"./Chat\"\r\nimport Setname from \"./Setname\"\r\nimport {gotName, onServerDisconnect} from \"../api\";\r\n\r\nclass App extends Component{\r\n\r\n    state = {isSet: false, username: '', roomid: '', chatlog: [], users: []};\r\n\r\n    onDisconnect = () => {\r\n        onServerDisconnect(() => {\r\n            window.location.reload();\r\n            alert(\"Server disconnected!\");\r\n        });\r\n    };  //обработка отключения пользователей\r\n\r\n    setName = () => {\r\n        gotName((data) => {\r\n            this.setState({isSet: true, username: data.username, roomid: data.roomid, chatlog: data.chatlog, users: data.users});\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setName();\r\n        this.onDisconnect();\r\n    }\r\n\r\n    render() {\r\n        return this.state.isSet ? <Chat state = {this.state}/> : <Setname/>\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport {render} from 'react-dom'\r\nimport App from \"./Components/App\";\r\n\r\nrender(<App/>, document.getElementById(\"root\"));"],"sourceRoot":""}